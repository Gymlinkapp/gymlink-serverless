import Head from "next/head";
import Image from "next/image";
import { useEffect, useState } from "react";

type User = {
  id: number;
  firstName: string;
  lastName: string;
  password?: string;
  email: string;
  isBot: boolean;
  images: string[];
  authSteps: number;
  longitude: number | null;
  latitude: number | null;
  chats?: number;
};

function Stat({ title, stat }: { title: string; stat: any }) {
  return (
    <div className="bg-slate-800 border-[0.5px] border-slate-700 flex-1 flex justify-center items-center flex-col rounded-2xl">
      <h4 className="font-medium text-2xl text-slate-400">{title}</h4>
      <h4 className="text-xl">{stat}</h4>
    </div>
  );
}

export default function Home() {
  const [users, setUsers] = useState<User[]>([]);
  const [displayedUsers, setDisplayedUsers] = useState<User[]>([]);
  const [realUsers, setRealUsers] = useState<User[]>([]);
  const [numberOfChats, setNumberOfChats] = useState(0);
  const [imageIndex, setImageIndex] = useState(0);
  const [isAuthorized, setIsAuthorized] = useState(false);

  const userHasLocation = (user: User) => {
    console.log(user.firstName, user.longitude, user.latitude)
    return user.latitude && user.longitude;
  };

useEffect(() => {
  if (isAuthorized) {
    fetch(`${process.env.NEXT_PUBLIC_URL}/dashboard/resources`, {
      method: "GET",
      })
      .then((res) => res.json())
      .then((data) => {
        setUsers(data.users);
        setDisplayedUsers(data.users);
        setNumberOfChats(data.chats.length);
      }).catch((err) => console.log(err));
  }
}, [isAuthorized]);

useEffect(() => {
  if (users) {
    const filteredUsers = users.filter((user) => user.isBot === false);
    setRealUsers(filteredUsers);
  }
}, [users]);

  if (!isAuthorized) {
    return (
      <div className="flex flex-col items-center justify-center h-screen">
        <h1 className="text-4xl font-bold">Enter password</h1>
        <input
          type="password"
          className="mt-4 border-2 border-slate-700 text-slate-900 rounded-md px-4 py-2"
          onKeyPress={(e) => {
            if (e.key === "Enter") {
              if (e.currentTarget.value === process.env.NEXT_PUBLIC_PASSWORD) {
                localStorage.setItem("password", e.currentTarget.value);
                setIsAuthorized(true);
              }
            }
          }}
        />
      </div>
    );
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="max-w-5xl mx-auto">
        <div className="min-h-[15vh] w-full flex justify-center gap-2 mt-20">
          <Stat title="Total Users" stat={realUsers.length} />
          <Stat title="Chats" stat={numberOfChats} />
          <Stat title="Chats" stat={numberOfChats} />
        </div>
        <div className="my-4 flex gap-2">
          <button
            className="bg-slate-700 text-slate-100 px-4 py-2 rounded-md"
            onClick={() => {
              const filteredUsers = users.filter(
                (user) => !user.isBot
              );
              setDisplayedUsers(filteredUsers);
            }}
          >
            Show Real Users
          </button>
          <button
            className="bg-slate-700 text-slate-100 px-4 py-2 rounded-md"
            onClick={() => {
              const filteredUsers = users.filter(
                (user) => user.password !== null || user.isBot
              );
              setDisplayedUsers(filteredUsers);
            }}
          >
            Clear
          </button>
        </div>
        <ul className="grid grid-cols-3 gap-4">
          {displayedUsers &&
            displayedUsers?.map((user) => (
              <li
                key={user.id}
                className="flex flex-col bg-slate-800 rounded-2xl overflow-auto shadow-sm"
              >
                <div className="relative w-full h-48">
                  {user.images.length > 0 && (
                    <Image
                      src={user.images[imageIndex]}
                      className=" object-cover"
                      fill
                      sizes="50%"
                      alt="user image"
                    />
                  )}
                  {user.images.length > 1 && (
                    <div className="absolute bottom-0 left-1/2 flex items-end justify-center z-50 gap-2 rounded-full px-8 py-4 bg-slate-50/25 -translate-x-1/2">
                      {user.images.map((_, index) => (
                        <span
                          key={index}
                          className="w-2 h-2 rounded-full bg-slate-100"
                        />
                      ))}
                    </div>
                  )}
                  <div className="absolute bottom-0 left-0 w-full h-32 bg-gradient-to-t from-slate-800/75 to-transparent"></div>
                </div>
                <div className="flex flex-col text-md font-medium gap-2 p-4">
                  <h4>
                    {user.firstName} {user.lastName}
                  </h4>
                  <h4>{user.email}</h4>
                  {!user.isBot && (
                    <div className="flex gap-1">
                      <p className="bg-slate-700 text-xs py-2 px-3 w-fit rounded-full">
                        {user.authSteps}
                      </p>
                      {userHasLocation(user) && (
                        <p className="bg-slate-700 text-xs py-2 px-3 w-fit rounded-full">
                          Has location
                        </p>
                      )}
                    </div>
                  )}
                  {user.isBot && (
                    <p className="bg-slate-700 max-w-fit text-xs px-8 py-2 rounded-full">
                      Bot
                    </p>
                  )}
                </div>
              </li>
            ))}
        </ul>
      </main>
    </>
  );
}
